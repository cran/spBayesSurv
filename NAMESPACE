useDynLib(spBayesSurv, .registration=TRUE)
importFrom(Rcpp, evalCpp)
importFrom("graphics", "lines", "par", "plot", "polygon", "legend")
importFrom("methods", "is")
importFrom("splines", "splineDesign")
importFrom("stats", ".getXlevels", "median", "model.extract",
           "model.matrix", "na.fail", "quantile", "rbeta", "sd",
           "terms", "cov", "qnorm", "var", "AIC", "uniroot", "makepredictcall",
           "qgamma", "as.formula", "delete.response", "model.frame", "na.omit")
S3method(predict, bspline)
S3method(makepredictcall, bspline)
S3method(print, survregbayes)
S3method(print, summary.survregbayes)
S3method(plot, survregbayes)
S3method(summary, survregbayes)
S3method(print, survregbayes2)
S3method(print, summary.survregbayes2)
S3method(plot, survregbayes2)
S3method(summary, survregbayes2)
S3method(print, frailtyGAFT)
S3method(print, summary.frailtyGAFT)
S3method(plot, frailtyGAFT)
S3method(summary, frailtyGAFT)
S3method(print, SuperSurvRegBayes)
S3method(print, summary.SuperSurvRegBayes)
S3method(plot, SuperSurvRegBayes)
S3method(summary, SuperSurvRegBayes)
S3method(print, indeptCoxph)
S3method(print, summary.indeptCoxph)
S3method(plot, indeptCoxph)
S3method(summary, indeptCoxph)
S3method(print, spCopulaCoxph)
S3method(print, summary.spCopulaCoxph)
S3method(plot, spCopulaCoxph)
S3method(summary, spCopulaCoxph)
S3method(plot, anovaDDP)
S3method(plot, spCopulaDDP)
S3method(print, SpatDensReg)
S3method(print, summary.SpatDensReg)
S3method(plot, SpatDensReg)
S3method(summary, SpatDensReg)
exportPattern("^[[:alpha:]]+")
